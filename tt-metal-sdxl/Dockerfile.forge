# SPDX-License-Identifier: Apache-2.0
#
# SPDX-FileCopyrightText: Â© 2024 Tenstorrent AI ULC

FROM ubuntu:22.04

SHELL ["/bin/bash", "-c"]

# Install system tools
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    curl \
    wget \
    jq \
    git \
    vim \
    nano \
    ca-certificates \
    sudo \
    ssh \
    python3.10 \
    python3.10-venv \
    python3.10-dev \
    python3-pip && \
    # Make Python 3.10 the default
    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1

# Install system dependencies
RUN apt-get update && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    build-essential \
    libnuma1 \
    protobuf-compiler && \
    wget "https://github.com/dmakoviichuk-tt/mpi-ulfm/releases/download/v5.0.7-ulfm/openmpi-ulfm_5.0.7-1_amd64.deb" -O "mpi.deb" && \
    apt install -y "./mpi.deb" && \
    rm -f "mpi.deb"

# Create forge user and home directory
RUN useradd -m -s /bin/bash forge && \
echo "forge ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/forge && \
chmod 0440 /etc/sudoers.d/forge

# Set working directory
WORKDIR /home/forge

# Switch to forge user for remaining operations
USER forge

# Create and activate virtual environment for tt-forge-fe, install whl
RUN FRONTEND=tt-forge-fe && \
    python -m venv venv-$FRONTEND && \
    source venv-$FRONTEND/bin/activate && \
    WHL_VERSION=$(pip index versions $FRONTEND -i https://pypi.eng.aws.tenstorrent.com --pre 2>/dev/null | grep -oP 'Available versions: \K.*' | tr -d ' ' | tr ',' '\n' | grep dev | head -n1) && \
    pip install --no-cache-dir https://pypi.eng.aws.tenstorrent.com/tt-forge-fe/tt_forge_fe-$WHL_VERSION-cp310-cp310-linux_x86_64.whl && \
    pip install --no-cache-dir https://pypi.eng.aws.tenstorrent.com/tt-tvm/tt_tvm-$WHL_VERSION-cp310-cp310-linux_x86_64.whl && \
    pip cache purge && rm -rf ~/.cache/pip

# Create and activate virtual environment for tt-torch, install whl
RUN FRONTEND=tt-torch && \
    python -m venv venv-$FRONTEND && \
    source venv-$FRONTEND/bin/activate && \
    WHL_VERSION=$(pip index versions $FRONTEND -i https://pypi.eng.aws.tenstorrent.com --pre 2>/dev/null | grep -oP 'Available versions: \K.*' | tr -d ' ' | tr ',' '\n' | grep dev | head -n1) && \
    pip install --no-cache-dir https://pypi.eng.aws.tenstorrent.com/tt-torch/tt_torch-$WHL_VERSION-cp310-cp310-linux_x86_64.whl && \
    pip cache purge && rm -rf ~/.cache/pip

# Create and activate virtual environment for tt-xla, install whl
RUN FRONTEND=tt-xla && \
    python -m venv venv-$FRONTEND && \
    source venv-$FRONTEND/bin/activate && \
    WHL_VERSION=$(pip index versions pjrt-plugin-tt -i https://pypi.eng.aws.tenstorrent.com --pre 2>/dev/null | grep -oP 'Available versions: \K.*' | tr -d ' ' | tr ',' '\n' | grep dev | head -n1) && \
    pip install --no-cache-dir https://pypi.eng.aws.tenstorrent.com/pjrt-plugin-tt/pjrt_plugin_tt-$WHL_VERSION-py3-none-linux_x86_64.whl && \
    pip cache purge && rm -rf ~/.cache/pip
# install inference server requirements
ARG APP_DIR="/home/forge"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "utils" "${APP_DIR}/utils"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "benchmarking" "${APP_DIR}/benchmarking"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "evals" "${APP_DIR}/evals"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "tests" "${APP_DIR}/tests"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "locust" "${APP_DIR}/locust"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "VERSION" "${APP_DIR}/VERSION"
COPY --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} "tt-metal-sdxl" "${APP_DIR}/server"

# spinup inference server
WORKDIR "${APP_DIR}/server"
ENTRYPOINT []
EXPOSE 8000
CMD ["/bin/bash", "-c", "source venv-worker/bin/activate &&  source ./run_uvicorn.sh"]
