# SPDX-License-Identifier: Apache-2.0
#
# SPDX-FileCopyrightText: Â© 2024 Tenstorrent AI ULC

# ============================================================================
# Build stage - contains all build tools and artifacts
# ============================================================================
FROM ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:latest AS builder

LABEL maintainer="Igor Djuric <idjuric@tenstorrent.com>" \
      org.opencontainers.image.source=https://github.com/tenstorrent/tt-inference-server

ARG DEBIAN_FRONTEND=noninteractive
ARG MODEL_RUNNER=forge
ARG CONTAINER_APP_UID=1000
ARG CONTAINER_APP_USERNAME=container_app_user
ARG HOME_DIR=/home/${CONTAINER_APP_USERNAME}

ENV CONFIG=Release \
    LOGURU_LEVEL=INFO

# Install build dependencies (single layer, cleaned)
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    python3-dev \
    python3-pip \
    libffi-dev \
    libssl-dev \
    protobuf-compiler \
    libprotobuf-dev \
    pkg-config \
    wget \
    curl \
    git \
    git-lfs \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Install CMake (separate layer for better caching)
RUN curl -fsSL https://github.com/Kitware/CMake/releases/download/v3.26.4/cmake-3.26.4-linux-x86_64.sh -o /tmp/cmake.sh && \
    chmod +x /tmp/cmake.sh && \
    /tmp/cmake.sh --skip-license --prefix=/usr/local && \
    rm /tmp/cmake.sh

# Install Python build tools
RUN pip3 install --no-cache-dir --upgrade setuptools wheel cmake && \
    hash -r

# Install tt-smi (separate layer)
RUN export CARGO_HOME=${HOME_DIR}/.cargo && \
    export RUSTUP_HOME=${HOME_DIR}/.rustup && \
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable --no-modify-path && \
    . ${HOME_DIR}/.cargo/env && \
    pip3 install --no-cache-dir git+https://github.com/tenstorrent/tt-smi && \
    rm -rf ${HOME_DIR}/.cargo/registry ${HOME_DIR}/.cargo/git ${HOME_DIR}/.rustup/toolchains/*/share ${HOME_DIR}/.rustup/toolchains/*/lib

# Copy application files and setup environment (top layer - changes frequently)
COPY "tt-media-server" "${HOME_DIR}/app/server"

# Setup forge environment as root before switching to user
RUN cd ${HOME_DIR}/app/server && \
    bash -c "source tt_model_runners/forge_runners/setup_env.sh" && \
    find ${HOME_DIR}/app -type d -name "__pycache__" -prune -exec rm -rf {} + 2>/dev/null || true && \
    find ${HOME_DIR}/app -type f -name "*.pyc" -delete

# ============================================================================
# Runtime stage - minimal image with runtime dependencies
# ============================================================================
FROM ghcr.io/tenstorrent/tt-metal/tt-metalium/ubuntu-22.04-dev-amd64:latest

LABEL maintainer="Igor Djuric <idjuric@tenstorrent.com>" \
      org.opencontainers.image.source=https://github.com/tenstorrent/tt-inference-server

ARG DEBIAN_FRONTEND=noninteractive
ARG MODEL_RUNNER=forge
ARG CONTAINER_APP_UID=1000
ARG CONTAINER_APP_USERNAME=container_app_user
ARG HOME_DIR=/home/${CONTAINER_APP_USERNAME}

# Runtime environment variables (single layer)
ENV MODEL_SERVICE=cnn \
    LOG_LEVEL=INFO \
    ENVIRONMENT=development \
    DEVICE_IDS=0 \
    MAX_QUEUE_SIZE=1 \
    MAX_BATCH_SIZE=1 \
    MODEL_RUNNER=${MODEL_RUNNER} \
    SHELL=/bin/bash \
    CONTAINER_APP_USERNAME=${CONTAINER_APP_USERNAME} \
    CONFIG=Release \
    LOGURU_LEVEL=INFO \
    APP_DIR=${HOME_DIR}/app

# Install runtime dependencies (single layer, cleaned)
RUN apt-get update && apt-get install -y --no-install-recommends \
    gosu \
    libgl1 \
    libsndfile1 \
    libprotobuf23 \
    libffi8 \
    libssl3 \
    python3 \
    python3-pip \
    python3-dev \
    python3-distutils \
    ca-certificates \
    build-essential \
    gcc \
    g++ \
    git \
    curl \
    wget \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Create user (single layer)
RUN useradd -u ${CONTAINER_APP_UID} -s /bin/bash -m -d ${HOME_DIR} ${CONTAINER_APP_USERNAME} && \
    mkdir -p /run/sshd && \
    chmod 755 /run/sshd

# Copy artifacts from builder (this is the big layer, but stable)
COPY --from=builder --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} ${HOME_DIR}/app ${HOME_DIR}/app
COPY --from=builder --chown=${CONTAINER_APP_USERNAME}:${CONTAINER_APP_USERNAME} ${HOME_DIR}/.cargo/bin ${HOME_DIR}/.cargo/bin

USER ${CONTAINER_APP_USERNAME}

WORKDIR ${APP_DIR}

EXPOSE 8000
CMD ["/bin/bash", "-c", "cd ${APP_DIR}/server/ && source venv-worker/bin/activate && source ./run_uvicorn.sh"]